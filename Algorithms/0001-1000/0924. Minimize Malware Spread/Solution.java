class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int remove = -1;
        int maxDecrease = 0;
        Arrays.sort(initial);
        int length = graph.length;
        Set<Integer> initialSet = new HashSet<Integer>();
        for (int infected : initial)
            initialSet.add(infected);
        Set<Integer> excludeSet = new HashSet<Integer>();
        Queue<Integer> queue = new LinkedList<Integer>();
        for (int infected : initial) {
            if (!excludeSet.contains(infected)) {
                boolean single = true;
                boolean[] visited = new boolean[length];
                visited[infected] = true;
                queue.offer(infected);
                int count = 1;
                while (!queue.isEmpty()) {
                    int node = queue.poll();
                    for (int i = 0; i < length; i++) {
                        if (graph[node][i] == 1 && !visited[i]) {
                            visited[i] = true;
                            queue.offer(i);
                            if (initialSet.contains(i)) {
                                single = false;
                                excludeSet.add(i);
                            }
                            count++;
                        }
                    }
                }
                if (single) {
                    if (count > maxDecrease) {
                        maxDecrease = count;
                        remove = infected;
                    }
                } else {
                    excludeSet.add(infected);
                    if (remove == -1)
                        remove = infected;
                }
            }
        }
        return remove;
    }
}