class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int length = graph.length;
        Set<Integer> initialSet = new HashSet<Integer>();
        for (int infected : initial)
            initialSet.add(infected);
        Map<Integer, Set<Integer>> connectionMap = new HashMap<Integer, Set<Integer>>();
        Map<Integer, Set<Integer>> infectedMap = new HashMap<Integer, Set<Integer>>();
        for (int infected : initial) {
            Set<Integer> connectionSet = new HashSet<Integer>();
            boolean[] visited = new boolean[length];
            visited[infected] = true;
            Queue<Integer> queue = new LinkedList<Integer>();
            queue.offer(infected);
            while (!queue.isEmpty()) {
                int node = queue.poll();
                for (int i = 0; i < length; i++) {
                    if (graph[node][i] == 1 && !visited[i] && !initialSet.contains(i)) {
                        visited[i] = true;
                        queue.offer(i);
                        connectionSet.add(i);
                        Set<Integer> set = infectedMap.getOrDefault(i, new HashSet<Integer>());
                        set.add(infected);
                        infectedMap.put(i, set);
                    }
                }
            }
            connectionMap.put(infected, connectionSet);
        }
        int remove = -1;
        int maxDecrease = 0;
        for (int infected : initial) {
            int decrease = 0;
            Set<Integer> connectionSet = connectionMap.getOrDefault(infected, new HashSet<Integer>());
            for (int node : connectionSet) {
                Set<Integer> infectedSet = infectedMap.get(node);
                if (infectedSet.size() == 1)
                    decrease++;
            }
            if (remove == -1 || decrease > maxDecrease) {
                remove = infected;
                maxDecrease = decrease;
            }
        }
        return remove;
    }
}